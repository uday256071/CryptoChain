d696faf96d7e02fd730aa20bbd932e51
const hexToBinary = require('hex-to-binary');
const { GENESIS_DATA, MINE_RATE } = require('../config.js');
const cryptoHash = require('../util/crypto-hash');

class Block {
    constructor({ timestamp, lastHash, hash, data, nonce, difficulty }) {
        this.timestamp = timestamp;
        this.lastHash = lastHash;
        this.hash = hash;
        this.data = data;
        this.nonce = nonce;
        this.difficulty = difficulty;
    }
    static genesis() {
        return new this(GENESIS_DATA);
    }
    static mineBlock({ lastBlock, data }) {
        let hash, timestamp;
        let { difficulty } = lastBlock;
        const lastHash = lastBlock.hash;
        let nonce = 0;

        do {
            nonce++;
            timestamp = Date.now();
            difficulty = Block.adjustDifficulty({ originalBlock: lastBlock, timestamp });
            hash = cryptoHash(timestamp, lastHash, data, nonce, difficulty);
        } while (hexToBinary(hash).substring(0, difficulty) !== '0'.repeat(difficulty));

        return new this({ timestamp, lastHash, data, difficulty, nonce, hash });
    }

    static adjustDifficulty({ originalBlock, timestamp }) {
        const { difficulty } = originalBlock;
        if (difficulty < 1) return 1;
        const difference = timestamp - originalBlock.timestamp;
        if (difference > MINE_RATE) return difficulty - 1;

        return difficulty + 1;
    }
}

module.exports = Block;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2NrLmpzIl0sIm5hbWVzIjpbImhleFRvQmluYXJ5IiwicmVxdWlyZSIsIkdFTkVTSVNfREFUQSIsIk1JTkVfUkFURSIsImNyeXB0b0hhc2giLCJCbG9jayIsImNvbnN0cnVjdG9yIiwidGltZXN0YW1wIiwibGFzdEhhc2giLCJoYXNoIiwiZGF0YSIsIm5vbmNlIiwiZGlmZmljdWx0eSIsImdlbmVzaXMiLCJtaW5lQmxvY2siLCJsYXN0QmxvY2siLCJEYXRlIiwibm93IiwiYWRqdXN0RGlmZmljdWx0eSIsIm9yaWdpbmFsQmxvY2siLCJzdWJzdHJpbmciLCJyZXBlYXQiLCJkaWZmZXJlbmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsY0FBWUMsUUFBUSxlQUFSLENBQWxCO0FBQ0EsTUFBTSxFQUFDQyxZQUFELEVBQWNDLFNBQWQsS0FBeUJGLFFBQVEsY0FBUixDQUEvQjtBQUNBLE1BQU1HLGFBQVdILFFBQVEscUJBQVIsQ0FBakI7O0FBRUEsTUFBTUksS0FBTixDQUFXO0FBQ1BDLGdCQUFZLEVBQUNDLFNBQUQsRUFBV0MsUUFBWCxFQUFvQkMsSUFBcEIsRUFBeUJDLElBQXpCLEVBQThCQyxLQUE5QixFQUFvQ0MsVUFBcEMsRUFBWixFQUE0RDtBQUN4RCxhQUFLTCxTQUFMLEdBQWVBLFNBQWY7QUFDQSxhQUFLQyxRQUFMLEdBQWNBLFFBQWQ7QUFDQSxhQUFLQyxJQUFMLEdBQVVBLElBQVY7QUFDQSxhQUFLQyxJQUFMLEdBQVVBLElBQVY7QUFDQSxhQUFLQyxLQUFMLEdBQVdBLEtBQVg7QUFDQSxhQUFLQyxVQUFMLEdBQWdCQSxVQUFoQjtBQUNIO0FBQ0QsV0FBT0MsT0FBUCxHQUFnQjtBQUNaLGVBQU8sSUFBSSxJQUFKLENBQVNYLFlBQVQsQ0FBUDtBQUNIO0FBQ0QsV0FBT1ksU0FBUCxDQUFpQixFQUFDQyxTQUFELEVBQVdMLElBQVgsRUFBakIsRUFBa0M7QUFDOUIsWUFBSUQsSUFBSixFQUFTRixTQUFUO0FBQ0EsWUFBSSxFQUFDSyxVQUFELEtBQWFHLFNBQWpCO0FBQ0EsY0FBTVAsV0FBU08sVUFBVU4sSUFBekI7QUFDQSxZQUFJRSxRQUFNLENBQVY7O0FBRUEsV0FBRTtBQUNFQTtBQUNBSix3QkFBVVMsS0FBS0MsR0FBTCxFQUFWO0FBQ0FMLHlCQUFXUCxNQUFNYSxnQkFBTixDQUF1QixFQUFDQyxlQUFjSixTQUFmLEVBQXlCUixTQUF6QixFQUF2QixDQUFYO0FBQ0FFLG1CQUFLTCxXQUFXRyxTQUFYLEVBQXFCQyxRQUFyQixFQUE4QkUsSUFBOUIsRUFBbUNDLEtBQW5DLEVBQXlDQyxVQUF6QyxDQUFMO0FBQ0gsU0FMRCxRQUtPWixZQUFZUyxJQUFaLEVBQWtCVyxTQUFsQixDQUE0QixDQUE1QixFQUE4QlIsVUFBOUIsTUFBNkMsSUFBSVMsTUFBSixDQUFXVCxVQUFYLENBTHBEOztBQU9BLGVBQU8sSUFBSSxJQUFKLENBQVMsRUFBQ0wsU0FBRCxFQUFXQyxRQUFYLEVBQW9CRSxJQUFwQixFQUF5QkUsVUFBekIsRUFBb0NELEtBQXBDLEVBQTBDRixJQUExQyxFQUFULENBQVA7QUFDSDs7QUFFRCxXQUFPUyxnQkFBUCxDQUF3QixFQUFDQyxhQUFELEVBQWVaLFNBQWYsRUFBeEIsRUFBa0Q7QUFDOUMsY0FBTSxFQUFDSyxVQUFELEtBQWFPLGFBQW5CO0FBQ0EsWUFBSVAsYUFBVyxDQUFmLEVBQWtCLE9BQU8sQ0FBUDtBQUNsQixjQUFNVSxhQUFhZixZQUFVWSxjQUFjWixTQUEzQztBQUNBLFlBQUdlLGFBQVduQixTQUFkLEVBQ0ksT0FBT1MsYUFBVyxDQUFsQjs7QUFFSixlQUFPQSxhQUFXLENBQWxCO0FBQ0g7QUFwQ007O0FBeUNYVyxPQUFPQyxPQUFQLEdBQWVuQixLQUFmIiwiZmlsZSI6ImJsb2NrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGV4VG9CaW5hcnk9cmVxdWlyZSgnaGV4LXRvLWJpbmFyeScpO1xuY29uc3Qge0dFTkVTSVNfREFUQSxNSU5FX1JBVEV9PXJlcXVpcmUoJy4uL2NvbmZpZy5qcycpXG5jb25zdCBjcnlwdG9IYXNoPXJlcXVpcmUoJy4uL3V0aWwvY3J5cHRvLWhhc2gnKVxuXG5jbGFzcyBCbG9ja3tcbiAgICBjb25zdHJ1Y3Rvcih7dGltZXN0YW1wLGxhc3RIYXNoLGhhc2gsZGF0YSxub25jZSxkaWZmaWN1bHR5fSl7XG4gICAgICAgIHRoaXMudGltZXN0YW1wPXRpbWVzdGFtcFxuICAgICAgICB0aGlzLmxhc3RIYXNoPWxhc3RIYXNoXG4gICAgICAgIHRoaXMuaGFzaD1oYXNoXG4gICAgICAgIHRoaXMuZGF0YT1kYXRhXG4gICAgICAgIHRoaXMubm9uY2U9bm9uY2VcbiAgICAgICAgdGhpcy5kaWZmaWN1bHR5PWRpZmZpY3VsdHlcbiAgICB9XG4gICAgc3RhdGljIGdlbmVzaXMoKXtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKEdFTkVTSVNfREFUQSk7XG4gICAgfVxuICAgIHN0YXRpYyBtaW5lQmxvY2soe2xhc3RCbG9jayxkYXRhfSl7XG4gICAgICAgIGxldCBoYXNoLHRpbWVzdGFtcDtcbiAgICAgICAgbGV0IHtkaWZmaWN1bHR5fT1sYXN0QmxvY2s7XG4gICAgICAgIGNvbnN0IGxhc3RIYXNoPWxhc3RCbG9jay5oYXNoO1xuICAgICAgICBsZXQgbm9uY2U9MDtcblxuICAgICAgICBkb3tcbiAgICAgICAgICAgIG5vbmNlKys7XG4gICAgICAgICAgICB0aW1lc3RhbXA9RGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGRpZmZpY3VsdHk9QmxvY2suYWRqdXN0RGlmZmljdWx0eSh7b3JpZ2luYWxCbG9jazpsYXN0QmxvY2ssdGltZXN0YW1wfSk7XG4gICAgICAgICAgICBoYXNoPWNyeXB0b0hhc2godGltZXN0YW1wLGxhc3RIYXNoLGRhdGEsbm9uY2UsZGlmZmljdWx0eSk7XG4gICAgICAgIH13aGlsZShoZXhUb0JpbmFyeShoYXNoKS5zdWJzdHJpbmcoMCxkaWZmaWN1bHR5KSE9PSAnMCcucmVwZWF0KGRpZmZpY3VsdHkpKTtcblxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoe3RpbWVzdGFtcCxsYXN0SGFzaCxkYXRhLGRpZmZpY3VsdHksbm9uY2UsaGFzaH0pOyAgICAgICBcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRqdXN0RGlmZmljdWx0eSh7b3JpZ2luYWxCbG9jayx0aW1lc3RhbXB9KXtcbiAgICAgICAgY29uc3Qge2RpZmZpY3VsdHl9PW9yaWdpbmFsQmxvY2s7XG4gICAgICAgIGlmIChkaWZmaWN1bHR5PDEpIHJldHVybiAxO1xuICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gdGltZXN0YW1wLW9yaWdpbmFsQmxvY2sudGltZXN0YW1wO1xuICAgICAgICBpZihkaWZmZXJlbmNlPk1JTkVfUkFURSlcbiAgICAgICAgICAgIHJldHVybiBkaWZmaWN1bHR5LTE7XG5cbiAgICAgICAgcmV0dXJuIGRpZmZpY3VsdHkrMTtcbiAgICB9XG59XG5cblxuXG5tb2R1bGUuZXhwb3J0cz1CbG9jazsiXX0=