{"version":3,"sources":["block.js"],"names":["hexToBinary","require","GENESIS_DATA","MINE_RATE","cryptoHash","Block","constructor","timestamp","lastHash","hash","data","nonce","difficulty","genesis","mineBlock","lastBlock","Date","now","adjustDifficulty","originalBlock","substring","repeat","difference","module","exports"],"mappings":"AAAA,MAAMA,cAAYC,QAAQ,eAAR,CAAlB;AACA,MAAM,EAACC,YAAD,EAAcC,SAAd,KAAyBF,QAAQ,cAAR,CAA/B;AACA,MAAMG,aAAWH,QAAQ,qBAAR,CAAjB;;AAEA,MAAMI,KAAN,CAAW;AACPC,gBAAY,EAACC,SAAD,EAAWC,QAAX,EAAoBC,IAApB,EAAyBC,IAAzB,EAA8BC,KAA9B,EAAoCC,UAApC,EAAZ,EAA4D;AACxD,aAAKL,SAAL,GAAeA,SAAf;AACA,aAAKC,QAAL,GAAcA,QAAd;AACA,aAAKC,IAAL,GAAUA,IAAV;AACA,aAAKC,IAAL,GAAUA,IAAV;AACA,aAAKC,KAAL,GAAWA,KAAX;AACA,aAAKC,UAAL,GAAgBA,UAAhB;AACH;AACD,WAAOC,OAAP,GAAgB;AACZ,eAAO,IAAI,IAAJ,CAASX,YAAT,CAAP;AACH;AACD,WAAOY,SAAP,CAAiB,EAACC,SAAD,EAAWL,IAAX,EAAjB,EAAkC;AAC9B,YAAID,IAAJ,EAASF,SAAT;AACA,YAAI,EAACK,UAAD,KAAaG,SAAjB;AACA,cAAMP,WAASO,UAAUN,IAAzB;AACA,YAAIE,QAAM,CAAV;;AAEA,WAAE;AACEA;AACAJ,wBAAUS,KAAKC,GAAL,EAAV;AACAL,yBAAWP,MAAMa,gBAAN,CAAuB,EAACC,eAAcJ,SAAf,EAAyBR,SAAzB,EAAvB,CAAX;AACAE,mBAAKL,WAAWG,SAAX,EAAqBC,QAArB,EAA8BE,IAA9B,EAAmCC,KAAnC,EAAyCC,UAAzC,CAAL;AACH,SALD,QAKOZ,YAAYS,IAAZ,EAAkBW,SAAlB,CAA4B,CAA5B,EAA8BR,UAA9B,MAA6C,IAAIS,MAAJ,CAAWT,UAAX,CALpD;;AAOA,eAAO,IAAI,IAAJ,CAAS,EAACL,SAAD,EAAWC,QAAX,EAAoBE,IAApB,EAAyBE,UAAzB,EAAoCD,KAApC,EAA0CF,IAA1C,EAAT,CAAP;AACH;;AAED,WAAOS,gBAAP,CAAwB,EAACC,aAAD,EAAeZ,SAAf,EAAxB,EAAkD;AAC9C,cAAM,EAACK,UAAD,KAAaO,aAAnB;AACA,YAAIP,aAAW,CAAf,EAAkB,OAAO,CAAP;AAClB,cAAMU,aAAaf,YAAUY,cAAcZ,SAA3C;AACA,YAAGe,aAAWnB,SAAd,EACI,OAAOS,aAAW,CAAlB;;AAEJ,eAAOA,aAAW,CAAlB;AACH;AApCM;;AAyCXW,OAAOC,OAAP,GAAenB,KAAf","file":"block.js","sourcesContent":["const hexToBinary=require('hex-to-binary');\nconst {GENESIS_DATA,MINE_RATE}=require('../config.js')\nconst cryptoHash=require('../util/crypto-hash')\n\nclass Block{\n    constructor({timestamp,lastHash,hash,data,nonce,difficulty}){\n        this.timestamp=timestamp\n        this.lastHash=lastHash\n        this.hash=hash\n        this.data=data\n        this.nonce=nonce\n        this.difficulty=difficulty\n    }\n    static genesis(){\n        return new this(GENESIS_DATA);\n    }\n    static mineBlock({lastBlock,data}){\n        let hash,timestamp;\n        let {difficulty}=lastBlock;\n        const lastHash=lastBlock.hash;\n        let nonce=0;\n\n        do{\n            nonce++;\n            timestamp=Date.now();\n            difficulty=Block.adjustDifficulty({originalBlock:lastBlock,timestamp});\n            hash=cryptoHash(timestamp,lastHash,data,nonce,difficulty);\n        }while(hexToBinary(hash).substring(0,difficulty)!== '0'.repeat(difficulty));\n\n        return new this({timestamp,lastHash,data,difficulty,nonce,hash});       \n    }\n\n    static adjustDifficulty({originalBlock,timestamp}){\n        const {difficulty}=originalBlock;\n        if (difficulty<1) return 1;\n        const difference = timestamp-originalBlock.timestamp;\n        if(difference>MINE_RATE)\n            return difficulty-1;\n\n        return difficulty+1;\n    }\n}\n\n\n\nmodule.exports=Block;"]}