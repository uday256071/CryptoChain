{"version":3,"sources":["index.test.js"],"names":["Wallet","require","verifySignature","describe","wallet","beforeEach","it","expect","toHaveProperty","data"],"mappings":"AAAA,MAAMA,SAAQC,QAAQ,SAAR,CAAd;AACA,MAAM,EAACC,eAAD,KAAkBD,QAAQ,SAAR,CAAxB;;AAEAE,SAAS,QAAT,EAAkB,MAAI;AAClB,QAAIC,MAAJ;;AAEAC,eAAW,MAAI;AACXD,iBAAO,IAAIJ,MAAJ,EAAP;AACH,KAFD;;AAIAM,OAAG,eAAH,EAAmB,MAAI;AACnBC,eAAOH,MAAP,EAAeI,cAAf,CAA8B,SAA9B;AACH,KAFD;AAGAF,OAAG,kBAAH,EAAsB,MAAI;AACtB;AACAC,eAAOH,MAAP,EAAeI,cAAf,CAA8B,WAA9B;AACH,KAHD;AAIAL,aAAS,cAAT,EAAwB,MAAI;AACxB,cAAMM,OAAK,SAAX;;AAEAH,WAAG,sBAAH,EAA0B,MAAI,CAE7B,CAFD;AAGAA,WAAG,sCAAH,EAA0C,MAAI,CAE7C,CAFD;AAGH,KATD;AAUH,CAxBD","file":"index.test.js","sourcesContent":["const Wallet =require('./index');\nconst {verifySignature}=require('../util');\n\ndescribe('wallet',()=>{\n    let wallet;\n\n    beforeEach(()=>{\n        wallet=new Wallet();\n    });\n\n    it('has a balance',()=>{\n        expect(wallet).toHaveProperty('balance');\n    });\n    it('has a public key',()=>{\n        // console.log(wallet.publicKey);\n        expect(wallet).toHaveProperty('publicKey');\n    });\n    describe('signing data',()=>{\n        const data=\"foo-bar\";\n\n        it('verifies a signature',()=>{\n\n        });\n        it('does not verify an invalid signature',()=>{\n\n        });\n    });\n})"]}