{"version":3,"sources":["index.js"],"names":["Block","require","cryptoHash","Blockchain","constructor","chain","genesis","addBlock","data","newBlock","mineBlock","lastBlock","length","push","replaceChain","console","error","isValidChain","log","JSON","stringify","i","timestamp","lastHash","hash","nonce","difficulty","actualLastHash","lastDifficulty","validatedHash","Math","abs","module","exports"],"mappings":"AAAA,MAAMA,QAAQC,QAAQ,SAAR,CAAd;AACA,MAAMC,aAAWD,QAAQ,qBAAR,CAAjB;;AAEA,MAAME,UAAN,CAAgB;AACZC,kBAAa;AACT,aAAKC,KAAL,GAAW,CAACL,MAAMM,OAAN,EAAD,CAAX;AACH;AACDC,aAAS,EAACC,IAAD,EAAT,EAAgB;AACZ,cAAMC,WAAWT,MAAMU,SAAN,CAAgB;AAC7BC,uBAAW,KAAKN,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAkB,CAA7B,CADkB;AAE7BJ;AAF6B,SAAhB,CAAjB;AAIA,aAAKH,KAAL,CAAWQ,IAAX,CAAgBJ,QAAhB;AACH;AACDK,iBAAaT,KAAb,EAAmB;AACf,YAAGA,MAAMO,MAAN,IAAgB,KAAKP,KAAL,CAAWO,MAA9B,EAAqC;AACjCG,oBAAQC,KAAR,CAAc,oCAAd;AACA;AACH;AACD,YAAG,CAACb,WAAWc,YAAX,CAAwBZ,KAAxB,CAAJ,EAAmC;AAC/BU,oBAAQC,KAAR,CAAc,mCAAd;AACA;AACH;AACDD,gBAAQG,GAAR,CAAY,sBAAZ,EAAmCb,KAAnC;AACA,aAAKA,KAAL,GAAWA,KAAX;AACH;AACD,WAAOY,YAAP,CAAoBZ,KAApB,EAA0B;AACtB,YAAGc,KAAKC,SAAL,CAAef,MAAM,CAAN,CAAf,MAA4Bc,KAAKC,SAAL,CAAepB,MAAMM,OAAN,EAAf,CAA/B,EAA+D;AAC3D,mBAAO,KAAP;AACH;AACD,aAAK,IAAIe,IAAE,CAAX,EAAaA,IAAEhB,MAAMO,MAArB,EAA4BS,GAA5B,EAAgC;AAC5B,kBAAM,EAACC,SAAD,EAAWC,QAAX,EAAoBC,IAApB,EAAyBC,KAAzB,EAA+BC,UAA/B,EAA0ClB,IAA1C,KAAiDH,MAAMgB,CAAN,CAAvD;AACA,kBAAMM,iBAAiBtB,MAAMgB,IAAE,CAAR,EAAWG,IAAlC;;AAEA,kBAAMI,iBAAevB,MAAMgB,IAAE,CAAR,EAAWK,UAAhC;;AAEA,gBAAGH,aAAWI,cAAd,EAA8B,OAAO,KAAP;;AAE9B,kBAAME,gBAAc3B,WAAWoB,SAAX,EAAqBC,QAArB,EAA8Bf,IAA9B,EAAmCiB,KAAnC,EAAyCC,UAAzC,CAApB;AACA,gBAAGF,SAASK,aAAZ,EAA2B,OAAO,KAAP;;AAE3B,gBAAGC,KAAKC,GAAL,CAASH,iBAAeF,UAAxB,IAAoC,CAAvC,EAA0C,OAAO,KAAP;AAC7C;;AAED,eAAO,IAAP;AACH;AA1CW;;AA6ChBM,OAAOC,OAAP,GAAe9B,UAAf","file":"index.js","sourcesContent":["const Block = require('./block');\nconst cryptoHash=require('../util/crypto-hash')\n\nclass Blockchain{\n    constructor(){\n        this.chain=[Block.genesis()];\n    }\n    addBlock({data}){\n        const newBlock = Block.mineBlock({\n            lastBlock: this.chain[this.chain.length-1],\n            data\n        });\n        this.chain.push(newBlock);\n    }\n    replaceChain(chain){\n        if(chain.length <= this.chain.length){\n            console.error('The incomming chain must be longer');\n            return;\n        }\n        if(!Blockchain.isValidChain(chain)){\n            console.error('The incomming Chain must be valid');\n            return;\n        }\n        console.log('replacing chain with',chain);\n        this.chain=chain;\n    }\n    static isValidChain(chain){\n        if(JSON.stringify(chain[0])!== JSON.stringify(Block.genesis())){\n            return false;\n        }\n        for (let i=1;i<chain.length;i++){\n            const {timestamp,lastHash,hash,nonce,difficulty,data} =chain[i];\n            const actualLastHash = chain[i-1].hash;\n\n            const lastDifficulty=chain[i-1].difficulty;\n\n            if(lastHash!==actualLastHash) return false;\n\n            const validatedHash=cryptoHash(timestamp,lastHash,data,nonce,difficulty);\n            if(hash !== validatedHash) return false;\n            \n            if(Math.abs(lastDifficulty-difficulty)>1) return false;\n        }\n         \n        return true;\n    }\n}\n\nmodule.exports=Blockchain;"]}