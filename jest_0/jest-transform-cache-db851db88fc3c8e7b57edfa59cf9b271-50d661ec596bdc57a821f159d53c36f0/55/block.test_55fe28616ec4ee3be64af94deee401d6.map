{"version":3,"sources":["block.test.js"],"names":["hexToBinary","require","Block","MINE_RATE","GENESIS_DATA","cryptoHash","describe","timestamp","lastHash","hash","data","nonce","difficulty","block","it","expect","toEqual","genesisBlock","genesis","console","log","toBe","lastBlock","minedBlock","mineBlock","not","undefined","substring","repeat","possibleResults","includes","adjustDifficulty","originalBlock"],"mappings":"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","file":"block.test.js","sourcesContent":["const hexToBinary=require('hex-to-binary');\nconst Block=require('./block');\nconst {MINE_RATE,GENESIS_DATA}=require('../config');\nconst cryptoHash=require('../util/crypto-hash');\n\ndescribe('Block',()=>{\n    const timestamp=2000;\n    const lastHash='foo-hash';\n    const hash='bar-hash';\n    const data=['blockchain','data'];\n    const nonce=1;\n    const difficulty=1;\n    const block=new Block({ timestamp, lastHash, hash, data, nonce, difficulty });\n\n    it('has a timestamp,lasthash,hash and data property',()=>{\n        expect(block.timestamp).toEqual(timestamp);\n        expect(block.lastHash).toEqual(lastHash);\n        expect(block.hash).toEqual(hash);\n        expect(block.data).toEqual(data);\n        expect(block.nonce).toEqual(nonce);\n        expect(block.difficulty).toEqual(difficulty)\n    });\n\n    describe('genesis()',()=>{\n        const genesisBlock =Block.genesis();\n        console.log(\"genesisBlock--->\",genesisBlock);\n\n        it('returns a Block instance',()=>{\n            expect(genesisBlock instanceof Block).toBe(true);\n        });\n        it('returns the genesis data',()=>{\n            expect(genesisBlock).toEqual(GENESIS_DATA);\n        })\n    });\n\n    describe('mineBlock()',()=>{\n        const lastBlock=Block.genesis();\n        const data='mined data';\n        const minedBlock=Block.mineBlock({lastBlock,data})\n\n        it('returns a Block instance',()=>{\n            expect(minedBlock instanceof Block).toBe(true);\n        });\n        it('sets the `lastHash` to be the `hash` of the `lastBlock`',()=>{\n            expect(minedBlock.lastHash).toEqual(lastBlock.hash);\n        })\n        it('sets the `data`',()=>{\n            expect(minedBlock.data).toEqual(data);\n        });\n        it('sets a `timestamp`',()=>{\n            expect(minedBlock.timestamp).not.toEqual(undefined);\n        })\n        it('creates a SHA-256 `hash` based on proper inputs',()=>{\n            expect(minedBlock.hash)\n                .toEqual(\n                    cryptoHash(\n                        minedBlock.timestamp,\n                        minedBlock.nonce,\n                        minedBlock.difficulty,\n                        lastBlock.hash,\n                        data\n                    )\n                );\n        });\n        it('sets a `hash` that matches the difficulty criteria',()=>{\n            expect(hexToBinary(minedBlock.hash).substring(0,minedBlock.difficulty))\n                .toEqual('0'.repeat(minedBlock.difficulty));\n        });\n        it('adjusts the difficulty',()=>{\n            const possibleResults = [lastBlock.difficulty+1,lastBlock.difficulty-1];\n            expect(possibleResults.includes(minedBlock.difficulty)).toBe(true);\n        });\n    });\n\n    describe('adjustDifficulty',()=>{\n        it('raises the difficulty for a quickly mined block',()=>{\n            expect(Block.adjustDifficulty({\n                originalBlock: block,\n                timestamp: block.timestamp + MINE_RATE-100\n            })).toEqual(block.difficulty+1)\n        });\n        it('lowers the difficulty for a slowly mined block',()=>{\n            expect(Block.adjustDifficulty({\n                originalBlock: block,\n                timestamp: block.timestamp + MINE_RATE+100\n            })).toEqual(block.difficulty-1)\n        });\n        it('has a lower limit of 1',()=>{\n            block.difficulty=-1;\n            expect(Block.adjustDifficulty({originalBlock:block})).toEqual(1);\n        });\n    });\n});"]}