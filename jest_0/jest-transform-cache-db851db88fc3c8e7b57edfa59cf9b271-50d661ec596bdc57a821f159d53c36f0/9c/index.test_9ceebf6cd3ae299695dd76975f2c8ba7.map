{"version":3,"sources":["index.test.js"],"names":["Blockchain","require","Block","cryptoHash","describe","blockchain","newChain","originalChain","beforeEach","chain","it","expect","Array","toBe","toEqual","genesis","newData","addBlock","data","length","isValidChain","lastHash","lastBlock","hash","timestamp","Date","now","nonce","difficulty","badBlock","push","errorMock","logMock","jest","fn","global","console","error","log","new","replaceChain","toHaveBeenCalled"],"mappings":"AAAA,MAAMA,aAAWC,QAAQ,SAAR,CAAjB;AACA,MAAMC,QAAQD,QAAQ,SAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,qBAAR,CAAnB;;AAEAG,SAAS,YAAT,EAAsB,MAAI;AACtB,QAAIC,UAAJ,EAAeC,QAAf,EAAwBC,aAAxB;;AAEAC,eAAW,MAAI;AACXH,qBAAW,IAAIL,UAAJ,EAAX;AACAM,mBAAW,IAAIN,UAAJ,EAAX;AACAO,wBAAgBF,WAAWI,KAA3B;AACH,KAJD;;AAMAC,OAAG,mCAAH,EAAuC,MAAI;AACvCC,eAAON,WAAWI,KAAX,YAA4BG,KAAnC,EAA0CC,IAA1C,CAA+C,IAA/C;AACH,KAFD;AAGAH,OAAG,+BAAH,EAAmC,MAAI;AACnCC,eAAON,WAAWI,KAAX,CAAiB,CAAjB,CAAP,EAA4BK,OAA5B,CAAoCZ,MAAMa,OAAN,EAApC;AACH,KAFD;AAGAL,OAAG,+BAAH,EAAmC,MAAI;AACnC,cAAMM,UAAQ,SAAd;AACAX,mBAAWY,QAAX,CAAoB,EAACC,MAAKF,OAAN,EAApB;;AAEAL,eAAON,WAAWI,KAAX,CAAiBJ,WAAWI,KAAX,CAAiBU,MAAjB,GAAwB,CAAzC,EAA4CD,IAAnD,EAAyDJ,OAAzD,CAAiEE,OAAjE;AACH,KALD;;AAOAZ,aAAS,gBAAT,EAA0B,MAAI;AAC1BA,iBAAS,sDAAT,EAAgE,MAAI;AAChEM,eAAG,eAAH,EAAmB,MAAI;AACnBL,2BAAWI,KAAX,CAAiB,CAAjB,IAAoB,EAACS,MAAK,cAAN,EAApB;;AAEAP,uBAAOX,WAAWoB,YAAX,CAAwBf,WAAWI,KAAnC,CAAP,EAAkDI,IAAlD,CAAuD,KAAvD;AACH,aAJD;AAKH,SAND;;AAQAT,iBAAS,iEAAT,EAA2E,MAAI;AAC3EI,uBAAW,MAAI;AACXH,2BAAWY,QAAX,CAAoB,EAACC,MAAK,OAAN,EAApB;AACAb,2BAAWY,QAAX,CAAoB,EAACC,MAAK,OAAN,EAApB;AACAb,2BAAWY,QAAX,CAAoB,EAACC,MAAK,cAAN,EAApB;AACH,aAJD;;AAMAd,qBAAS,sCAAT,EAAgD,MAAI;AAChDM,mBAAG,eAAH,EAAmB,MAAI;AACnBL,+BAAWI,KAAX,CAAiB,CAAjB,EAAoBY,QAApB,GAA6B,iBAA7B;AACAV,2BAAOX,WAAWoB,YAAX,CAAwBf,WAAWI,KAAnC,CAAP,EAAkDI,IAAlD,CAAuD,KAAvD;AACH,iBAHD;AAIH,aALD;AAMAT,qBAAS,sDAAT,EAAgE,MAAI;AAChEM,mBAAG,eAAH,EAAmB,MAAI;AACnBL,+BAAWI,KAAX,CAAiB,CAAjB,EAAoBS,IAApB,GAAyB,UAAzB;AACAP,2BAAOX,WAAWoB,YAAX,CAAwBf,WAAWI,KAAnC,CAAP,EAAkDI,IAAlD,CAAuD,KAAvD;AACH,iBAHD;AAIH,aALD;AAMAT,qBAAS,yDAAT,EAAmE,MAAI;AACnEM,mBAAG,eAAH,EAAmB,MAAI;AACnB,0BAAMY,YAAUjB,WAAWI,KAAX,CAAiBJ,WAAWI,KAAX,CAAiBU,MAAjB,GAAwB,CAAzC,CAAhB;AACA,0BAAME,WAASC,UAAUC,IAAzB;AACA,0BAAMC,YAAUC,KAAKC,GAAL,EAAhB;AACA,0BAAMC,QAAM,CAAZ;AACA,0BAAMT,OAAK,EAAX;AACA,0BAAMU,aAAWN,UAAUM,UAAV,GAAqB,CAAtC;;AAEA,0BAAML,OAAKpB,WAAWqB,SAAX,EAAqBH,QAArB,EAA8BO,UAA9B,EAAyCD,KAAzC,EAA+CT,IAA/C,CAAX;AACA,0BAAMW,WAAS,IAAI3B,KAAJ,CAAU,EAACsB,SAAD,EAAWH,QAAX,EAAoBE,IAApB,EAAyBI,KAAzB,EAA+BC,UAA/B,EAA0CV,IAA1C,EAAV,CAAf;AACAb,+BAAWI,KAAX,CAAiBqB,IAAjB,CAAsBD,QAAtB;;AAEAlB,2BAAOX,WAAWoB,YAAX,CAAwBf,WAAWI,KAAnC,CAAP,EAAkDI,IAAlD,CAAuD,KAAvD;AACH,iBAbD;AAcH,aAfD;AAgBAT,qBAAS,4CAAT,EAAsD,MAAI;AACtDM,mBAAG,cAAH,EAAkB,MAAI;AAClBC,2BAAOX,WAAWoB,YAAX,CAAwBf,WAAWI,KAAnC,CAAP,EAAkDI,IAAlD,CAAuD,IAAvD;AACH,iBAFD;AAGH,aAJD;AAKH,SAxCD;AAyCH,KAlDD;;AAoDAT,aAAS,gBAAT,EAA0B,MAAI;AAC1B,YAAI2B,SAAJ,EAAeC,OAAf;AACAxB,mBAAW,MAAI;AACXuB,wBAAUE,KAAKC,EAAL,EAAV;AACAF,sBAAQC,KAAKC,EAAL,EAAR;AACAC,mBAAOC,OAAP,CAAeC,KAAf,GAAqBN,SAArB;AACAI,mBAAOC,OAAP,CAAeE,GAAf,GAAmBN,OAAnB;AACH,SALD;AAMA5B,iBAAS,kCAAT,EAA4C,MAAI;AAC5CI,uBAAW,MAAI;AACXF,yBAASG,KAAT,CAAe,CAAf,IAAkB,EAAC8B,KAAI,OAAL,EAAlB;AACAlC,2BAAWmC,YAAX,CAAwBlC,SAASG,KAAjC;AACH,aAHD;;AAKAC,eAAG,4BAAH,EAAgC,MAAI;AAChCC,uBAAON,WAAWI,KAAlB,EAAyBK,OAAzB,CAAiCP,aAAjC;AACH,aAFD;AAGAG,eAAG,eAAH,EAAmB,MAAI;AACnBC,uBAAOoB,SAAP,EAAkBU,gBAAlB;AACH,aAFD;AAGH,SAZD;AAaArC,iBAAS,0BAAT,EAAoC,MAAI;AACpCI,uBAAW,MAAI;AACXF,yBAASW,QAAT,CAAkB,EAACC,MAAK,OAAN,EAAlB;AACAZ,yBAASW,QAAT,CAAkB,EAACC,MAAK,OAAN,EAAlB;AACAZ,yBAASW,QAAT,CAAkB,EAACC,MAAK,cAAN,EAAlB;AACH,aAJD;AAKAd,qBAAS,0BAAT,EAAoC,MAAI;AACpCI,2BAAW,MAAI;AACXF,6BAASG,KAAT,CAAe,CAAf,EAAkBc,IAAlB,GAAuB,gBAAvB;AACAlB,+BAAWmC,YAAX,CAAwBlC,SAASG,KAAjC;AACH,iBAHD;AAIAC,mBAAG,4BAAH,EAAgC,MAAI;AAChCC,2BAAON,WAAWI,KAAlB,EAAyBK,OAAzB,CAAiCP,aAAjC;AACH,iBAFD;AAGAG,mBAAG,eAAH,EAAmB,MAAI;AACnBC,2BAAOoB,SAAP,EAAkBU,gBAAlB;AACH,iBAFD;AAGH,aAXD;AAYArC,qBAAS,wBAAT,EAAkC,MAAI;AAClCI,2BAAW,MAAI;AACXH,+BAAWmC,YAAX,CAAwBlC,SAASG,KAAjC;AACH,iBAFD;AAGAC,mBAAG,oBAAH,EAAwB,MAAI;AACxBC,2BAAON,WAAWI,KAAlB,EAAyBK,OAAzB,CAAiCR,SAASG,KAA1C;AACH,iBAFD;AAGAC,mBAAG,kCAAH,EAAsC,MAAI;AACtCC,2BAAOqB,OAAP,EAAgBS,gBAAhB;AACH,iBAFD;AAGH,aAVD;AAWH,SA7BD;AA8BH,KAnDD;AAoDH,CA9HD","file":"index.test.js","sourcesContent":["const Blockchain=require('./index');\nconst Block = require('./block');\nconst cryptoHash = require('../util/crypto-hash');\n\ndescribe('Blockchain',()=>{\n    let blockchain,newChain,originalChain;\n\n    beforeEach(()=>{\n        blockchain=new Blockchain();\n        newChain = new Blockchain();\n        originalChain = blockchain.chain;\n    });\n\n    it('contains a `chain` Array instance',()=>{\n        expect(blockchain.chain instanceof Array).toBe(true);\n    });\n    it('starts with the genesis block',()=>{\n        expect(blockchain.chain[0]).toEqual(Block.genesis());\n    });\n    it('adds a new block to the chain',()=>{\n        const newData='foo bar';\n        blockchain.addBlock({data:newData});\n\n        expect(blockchain.chain[blockchain.chain.length-1].data).toEqual(newData);\n    });\n\n    describe('isValidChain()',()=>{\n        describe('when the chain does not start with the genesis block',()=>{\n            it('returns false',()=>{\n                blockchain.chain[0]={data:'fake-genesis'};\n\n                expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\n            });\n        });\n\n        describe('when the chain starts with genesis block and has multipe blocks',()=>{\n            beforeEach(()=>{\n                blockchain.addBlock({data:'Bears'});\n                blockchain.addBlock({data:'Beets'});\n                blockchain.addBlock({data:'Harry Potter'});\n            });\n\n            describe('and a lastHash reference has changed',()=>{\n                it('returns false',()=>{\n                    blockchain.chain[2].lastHash='broken-lastHash';\n                    expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\n                });\n            });\n            describe('and the chain contains a block with an invalid field',()=>{\n                it('returns false',()=>{\n                    blockchain.chain[2].data='bad-data';\n                    expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\n                });\n            });\n            describe('and the chain contains a block with a jumped difficulty',()=>{\n                it('returns false',()=>{\n                    const lastBlock=blockchain.chain[blockchain.chain.length-1];\n                    const lastHash=lastBlock.hash;\n                    const timestamp=Date.now();\n                    const nonce=0;\n                    const data=[];\n                    const difficulty=lastBlock.difficulty-3;\n\n                    const hash=cryptoHash(timestamp,lastHash,difficulty,nonce,data);\n                    const badBlock=new Block({timestamp,lastHash,hash,nonce,difficulty,data});\n                    blockchain.chain.push(badBlock);\n\n                    expect(Blockchain.isValidChain(blockchain.chain)).toBe(false);\n                });\n            });\n            describe('chain does not conatain any invalid blocks',()=>{\n                it('returns true',()=>{                 \n                    expect(Blockchain.isValidChain(blockchain.chain)).toBe(true);\n                });\n            });\n        });\n    });\n\n    describe('replaceChain()',()=>{\n        let errorMock, logMock;\n        beforeEach(()=>{\n            errorMock=jest.fn();\n            logMock=jest.fn();\n            global.console.error=errorMock;\n            global.console.log=logMock;\n        });\n        describe('when the new chain is not longer',()=>{\n            beforeEach(()=>{\n                newChain.chain[0]={new:'chain'};\n                blockchain.replaceChain(newChain.chain);\n            });\n\n            it('does not replace the chain',()=>{\n                expect(blockchain.chain).toEqual(originalChain);\n            });\n            it('logs an error',()=>{\n                expect(errorMock).toHaveBeenCalled();\n            });\n        });\n        describe('when the chain is longer',()=>{\n            beforeEach(()=>{\n                newChain.addBlock({data:'Bears'});\n                newChain.addBlock({data:'Beets'});\n                newChain.addBlock({data:'Harry Potter'});\n            });\n            describe('and the chain is invalid',()=>{\n                beforeEach(()=>{\n                    newChain.chain[2].hash='some-fake-hash';\n                    blockchain.replaceChain(newChain.chain);\n                });\n                it('does not replace the chain',()=>{\n                    expect(blockchain.chain).toEqual(originalChain);\n                });\n                it('logs an error',()=>{\n                    expect(errorMock).toHaveBeenCalled();\n                });\n            });\n            describe('and the chain is valid',()=>{\n                beforeEach(()=>{\n                    blockchain.replaceChain(newChain.chain);\n                })\n                it('replaces the chain',()=>{\n                    expect(blockchain.chain).toEqual(newChain.chain);\n                });\n                it('logs about the chain replacement',()=>{\n                    expect(logMock).toHaveBeenCalled();\n                });\n            });\n        });\n    });\n});\n"]}